/***************************************************************************

Atari Fire Truck + Super Bug + Monte Carlo driver

***************************************************************************/

#include "driver.h"

int firetrk_game;

static int steer_dir[2];
static int steer_flag[2];
static int attract;
static int gear;
static timer_entry* periodic_timer;

#include "../vidhrdw/firetrk.cpp"
#include "../sndhrdw/ataridis.cpp"


static void init_firetrk( void )
{
	firetrk_game = 1;
}

static void init_superbug( void )
{
	firetrk_game = 2;
}

static void init_montecar( void )
{
	firetrk_game = 3;
}


static int  firetrk_interrupt( void )
{
	/* interrupts are disabled during service mode */

	if (GAME_IS_FIRETRUCK)
	{
	    if (readinputport(4) & 0x80)
		return ignore_interrupt();
	}
	else
	if (GAME_IS_MONTECARLO)
	{
	    if (readinputport(6) & 0x80)
		return ignore_interrupt();
	}
	else
	{
	    discrete_sound_w(7, 0); /* ASR */
	}

	//cpu_set_nmi_line(0, PULSE_LINE);
	return nmi_interrupt();
}


static void periodic_callback(int dummy)
{
	static int scanline = 0;

	cpu_set_irq_line(0, 0, PULSE_LINE);

	/* IRQs are generated by inverse 16V signal */

	scanline += 32;

	if (scanline > 256)
	{
		scanline = 0;
	}

	//timer_set(cpu_getscanlinetime(scanline), scanline, periodic_callback);
	timer_reset(periodic_timer, cpu_getscanlinetime(scanline));
}


static void frame_callback(int dummy)
{
	static UINT8 dial[2];

	int i;

	/* handle steering wheels */

	for (i = 0; i < 2; i++)
	{
		signed char delta = readinputport(i) - dial[i];

		if (delta < 0)
		{
			steer_flag[i] = 1;
			steer_dir[i] = 0;
		}
		if (delta > 0)
		{
			steer_flag[i] = 1;
			steer_dir[i] = 1;
		}

		dial[i] += delta;
	}


	if (GAME_IS_FIRETRUCK)
	{
		/* watchdog is disabled during service mode */
		if (readinputport(4) & 0x80)
		{
			//watchdog_reset_w(0, 0);
		}

		/* map horn button onto discrete sound emulation */
		discrete_sound_w(1, readinputport(7));
	}

	/* update gear shift */

	if (GAME_IS_SUPERBUG || GAME_IS_MONTECARLO)
	{
		switch (readinputport(7) & 15)
		{
		case 1: gear = 1; break;
		case 2: gear = 2; break;
		case 4: gear = 3; break;
		case 8: gear = 4; break;
		}
	}
}


static void write_output(UINT8 flags)
{
	if (GAME_IS_FIRETRUCK)
	{
		/* BIT0 => START1 LAMP */
		/* BIT1 => START2 LAMP */
		/* BIT2 => FLASH       */
		/* BIT3 => TRACK LAMP  */
		/* BIT4 => ATTRACT     */
		/* BIT5 => START3 LAMP */
		/* BIT6 => UNUSED      */
		/* BIT7 => BELL OUT    */

		//set_led_status(0, !(flags & 0x01));
		//set_led_status(1, !(flags & 0x02));
		//set_led_status(2, !(flags & 0x20));
		//set_led_status(3, !(flags & 0x08));

		attract = flags & 0x10;

		discrete_sound_w(5, (flags & 0x80) ? 1 : 0);	/* Bell Sound */
		discrete_sound_w(6, (flags & 0x10) ? 1 : 0);	/* Attract */

		coin_lockout_w(0, !attract);
		coin_lockout_w(1, !attract);

		firetrk_set_flash(flags & 0x04);
	}

	if (GAME_IS_SUPERBUG)
	{
		/* BIT0 => START LAMP */
		/* BIT1 => ATTRACT    */
		/* BIT2 => FLASH      */
		/* BIT3 => TRACK LAMP */

		attract = flags & 0x02;

		//set_led_status(0, flags & 0x01);
		//set_led_status(1, flags & 0x08);

		discrete_sound_w(6, (flags & 0x02) ? 1 : 0);	/* Attract */

		coin_lockout_w(0, !attract);
		coin_lockout_w(1, !attract);

		firetrk_set_flash(flags & 0x04);
	}

	if (GAME_IS_MONTECARLO)
	{
		/* BIT0 => START LAMP    */
		/* BIT1 => TRACK LAMP    */
		/* BIT2 => ATTRACT       */
		/* BIT3 => UNUSED        */
		/* BIT4 => UNUSED        */
		/* BIT5 => COIN3 COUNTER */
		/* BIT6 => COIN2 COUNTER */
		/* BIT7 => COIN1 COUNTER */

		//set_led_status(0, !(flags & 0x01));
		//set_led_status(1, !(flags & 0x02));

		discrete_sound_w(6, (flags & 0x04) ? 1 : 0);	/* Attract */

		coin_counter_w(0, flags & 0x80);
		coin_counter_w(1, flags & 0x40);
		coin_counter_w(2, flags & 0x20);
	}
}


void init_machine_firetrk (void )
{
	timer_pulse(1. / 60, 0, frame_callback);

	if (GAME_IS_MONTECARLO)
	{
	    write_output(0);
	}

	periodic_timer = timer_set(TIME_NOW, 0, periodic_callback);
}

static unsigned char palette[] =
{
	0x00,0x00,0x00,
	0x5b,0x5b,0x5b,
	0xa4,0xa4,0xa4,
	0xff,0xff,0xff
};

static unsigned short colortable[] =
{
	0, 0, 1, 0,
	2, 0, 3, 0,
	3, 3, 2, 3,
	1, 3, 0, 3,
	0, 0, 1, 0,
	2, 0, 0, 3,
	3, 0, 0, 3
};


static void init_palette_firetrk(unsigned char *game_palette, unsigned short *game_colortable,const unsigned char *color_prom)
{
	memcpy(game_palette,palette,sizeof(palette));
	memcpy(game_colortable,colortable,sizeof(colortable));
}


static void prom_to_palette(unsigned char *game_palette, UINT8 val)
{
	//palette_set_color(number, (val & 4) ? 0xff : 0x00, (val & 2) ? 0xff : 0x00, (val & 1) ? 0xff : 0x00);
	*game_palette++=(val & 4) ? 0xff : 0x00;
	*game_palette++=(val & 2) ? 0xff : 0x00;
	*game_palette++=(val & 1) ? 0xff : 0x00;
}


static void init_palette_montecar(unsigned char *game_palette, unsigned short *game_colortable,const unsigned char *color_prom)
{
	static const UINT16 colortable_source[] =
	{
		0x00, 0x00, 0x00, 0x01,
		0x00, 0x02, 0x00, 0x03,
		0x03, 0x03, 0x03, 0x02,
		0x03, 0x01, 0x03, 0x00,
		0x00, 0x00, 0x02, 0x00,
		0x02, 0x01, 0x02, 0x02,
		0x00, 0x05, 0x06, 0x07,
		0x00, 0x09, 0x0A, 0x0B,
		0x00, 0x0D, 0x0E, 0x0F,
		0x00, 0x11, 0x12, 0x13,
		0x00, 0x15, 0x16, 0x17,
		0x18, 0x19
	};

	/*
	 * The color PROM is addressed as follows:
	 *
	 *   A0 => PLAYFIELD 1
	 *   A1 => PLAYFIELD 2
	 *   A2 => DRONE 1
	 *   A3 => DRONE 2
	 *   A4 => CAR 1
	 *   A5 => CAR 2
	 *   A6 => DRONE COLOR 1
	 *   A7 => DRONE COLOR 2
	 *   A8 => PLAYFIELD WINDOW
	 *
	 * This driver hard-codes some behavior which actually depends
	 * on the PROM, like priorities, clipping and transparency.
	 *
	 */

	const UINT8* p = memory_region(REGION_PROMS);

	prom_to_palette(game_palette, p[0x100]); game_palette+=3;
	prom_to_palette(game_palette, p[0x101]); game_palette+=3;
	prom_to_palette(game_palette, p[0x102]); game_palette+=3;
	prom_to_palette(game_palette, p[0x103]); game_palette+=3;

	prom_to_palette(game_palette, p[0x100]); game_palette+=3;
	prom_to_palette(game_palette, p[0x110]); game_palette+=3;
	prom_to_palette(game_palette, p[0x120]); game_palette+=3;
	prom_to_palette(game_palette, p[0x130]); game_palette+=3;

	prom_to_palette(game_palette, p[0x100]); game_palette+=3;
	prom_to_palette(game_palette, p[0x104]); game_palette+=3;
	prom_to_palette(game_palette, p[0x108]); game_palette+=3;
	prom_to_palette(game_palette, p[0x10C]); game_palette+=3;

	prom_to_palette(game_palette, p[0x140]); game_palette+=3;
	prom_to_palette(game_palette, p[0x144]); game_palette+=3;
	prom_to_palette(game_palette, p[0x148]); game_palette+=3;
	prom_to_palette(game_palette, p[0x14C]); game_palette+=3;

	prom_to_palette(game_palette, p[0x180]); game_palette+=3;
	prom_to_palette(game_palette, p[0x184]); game_palette+=3;
	prom_to_palette(game_palette, p[0x188]); game_palette+=3;
	prom_to_palette(game_palette, p[0x18C]); game_palette+=3;

	prom_to_palette(game_palette, p[0x1C0]); game_palette+=3;
	prom_to_palette(game_palette, p[0x1C4]); game_palette+=3;
	prom_to_palette(game_palette, p[0x1C8]); game_palette+=3;
	prom_to_palette(game_palette, p[0x1CC]); game_palette+=3;

	//palette_set_color(number++, 0x00, 0x00, 0x00);
	//palette_set_color(number++, 0xff, 0xff, 0xff);
	*game_palette++=0x00;
	*game_palette++=0x00;
	*game_palette++=0x00;
	*game_palette++=0xff;
	*game_palette++=0xff;
	*game_palette++=0xff;

	memcpy(colortable, colortable_source, sizeof(colortable_source));
}


static READ_HANDLER( firetrk_zeropage_r )
{
	//return memory_region(REGION_CPU1)[offset & 0xff];
	return firetrk_alpha_num_ram[offset & 0xff]; // This is equivalent
}


static READ_HANDLER( firetrk_playfield_r )
{
	return firetrk_playfield_ram[offset & 0xff];
}

static WRITE_HANDLER( firetrk_playfield_mirror_w )
{
	firetrk_playfield_w(offset & 0xff, data);
}


static READ_HANDLER( firetrk_dip_r )
{
	UINT8 val0 = readinputport(2);
	UINT8 val1 = readinputport(3);

	if (GAME_IS_FIRETRUCK || GAME_IS_SUPERBUG)
	{
		if (val1 & (1 << (2 * offset + 0))) val0 |= 1;
		if (val1 & (1 << (2 * offset + 1))) val0 |= 2;
	}
	if (GAME_IS_MONTECARLO)
	{
		if (val1 & (1 << (3 - offset))) val0 |= 1;
		if (val1 & (1 << (7 - offset))) val0 |= 2;
	}

	return val0;
}


static READ_HANDLER( firetrk_input_r )
{
	UINT8 val = 0;

	UINT8 bit0 = readinputport(4);
	UINT8 bit6 = readinputport(5);
	UINT8 bit7 = readinputport(6);

	if (GAME_IS_FIRETRUCK)
	{
		if (!steer_dir[0])
			bit0 |= 0x04;
		if (!steer_flag[0])
			bit7 |= 0x04;
		if (firetrk_skid[0] || firetrk_skid[1])
			bit0 |= 0x40;
		if (firetrk_crash[0] || firetrk_crash[1])
			bit7 |= 0x40;
		if (!steer_dir[1])
			bit0 |= 0x08;
		if (!steer_flag[1])
			bit7 |= 0x08;
	}

	if (GAME_IS_SUPERBUG)
	{
		if (!steer_dir[0])
			bit0 |= 0x04;
		if (!steer_flag[0])
			bit7 |= 0x04;
		if (firetrk_skid[0])
			bit0 |= 0x40;
		if (firetrk_crash[0])
			bit7 |= 0x40;
		if (gear == 1)
			bit7 |= 0x02;
		if (gear == 2)
			bit0 |= 0x01;
		if (gear == 3)
			bit7 |= 0x01;
	}

	if (GAME_IS_MONTECARLO)
	{
		if (!steer_dir[0])
			bit6 |= 0x40;
		if (!steer_flag[0])
			bit7 |= 0x40;
		if (gear == 1)
			bit6 |= 0x01;
		if (gear == 2)
			bit6 |= 0x02;
		if (gear == 3)
			bit6 |= 0x04;
		if (firetrk_skid[0])
			bit7 |= 0x80;
		if (firetrk_skid[1])
			bit6 |= 0x80;
		if (firetrk_crash[0])
			val |= 0x02;
		if (firetrk_crash[1])
			val |= 0x01;
	}

	if (bit0 & (1 << offset)) val |= 0x01;
	if (bit6 & (1 << offset)) val |= 0x40;
	if (bit7 & (1 << offset)) val |= 0x80;

	return val;
}


static WRITE_HANDLER( firetrk_zeropage_w )
{
	//memory_region(REGION_CPU1)[offset & 0xff] = data;
	firetrk_alpha_num_ram[offset & 0xff] = data;	// equivalent
}


static WRITE_HANDLER( firetrk_arrow_off_w )
{
	firetrk_set_blink(1);
}


static WRITE_HANDLER( firetrk_car_reset_w )
{
	firetrk_crash[0] = 0;
	firetrk_skid[0] = 0;
}


static WRITE_HANDLER( firetrk_drone_reset_w )
{
	firetrk_crash[1] = 0;
	firetrk_skid[1] = 0;
}


static WRITE_HANDLER( firetrk_steer_reset_w )
{
	steer_flag[0] = 0;
	steer_flag[1] = 0;
}


static WRITE_HANDLER( firetrk_crash_reset_w )
{
	firetrk_crash[0] = 0;
	firetrk_crash[1] = 0;
}


static WRITE_HANDLER( firetrk_skid_reset_w )
{
	if (GAME_IS_FIRETRUCK || GAME_IS_SUPERBUG)
	{
		firetrk_skid[0] = 0;
		firetrk_skid[1] = 0;
	}

	discrete_sound_w(4, 1);
}


static WRITE_HANDLER( firetrk_crash_snd_w )
{
	/* invert data here to make life easier on the sound system */
	discrete_sound_w(3, ((~data) >> 4)& 0x0f);
}


static WRITE_HANDLER( firetrk_skid_snd_w )
{
	discrete_sound_w(4, 0);
}


static WRITE_HANDLER( firetrk_motor_snd_w )
{
	if (GAME_IS_FIRETRUCK || GAME_IS_MONTECARLO)
	{
	    discrete_sound_w(2, data >> 4);         /* Fire Truck - Siren frequency */
	    /* Monte Carlo - Drone Motor frequency */
	}

	if (GAME_IS_SUPERBUG)
	    discrete_sound_w(0, (~data) & 0x0f);    /* motor frequency */
	else
	    discrete_sound_w(0, data & 0x0f);    /* motor frequency */
}


static WRITE_HANDLER( firetrk_xtndply_w )
{
	discrete_sound_w(7, !(data & 1));
}


static WRITE_HANDLER( firetrk_out_w )
{
	if (GAME_IS_FIRETRUCK || GAME_IS_MONTECARLO)
	{
		write_output(data);
	}
	if (GAME_IS_SUPERBUG)
	{
		write_output(offset);
	}
}


static WRITE_HANDLER( firetrk_out2_w )
{
	firetrk_set_flash(data & 0x80);

	if (GAME_IS_MONTECARLO)
	{
		discrete_sound_w(7, !(data & 0x10));	/* Beep */
		discrete_sound_w(5, data & 0x0f);	/* Drone Motor Volume */
	}
}


static WRITE_HANDLER( firetrk_asr_w )
{
	// Only Super bug uses this
	discrete_sound_w(7, 1);	/* ASR */
}


static struct MemoryReadAddress firetrk_readmem[] =
{
	{ 0x0000, 0x00ff, MRA_RAM },
	{ 0x0100, 0x07ff, firetrk_zeropage_r },
	{ 0x0800, 0x08ff, MRA_RAM },
	{ 0x0900, 0x0fff, firetrk_playfield_r },
	{ 0x1800, 0x1807, firetrk_input_r },
	{ 0x1c00, 0x1c03, firetrk_dip_r },
	{ 0x2000, 0x3fff, MRA_ROM },
	{ 0xf000, 0xffff, MRA_ROM },
	{ -1 }  /* end of table */
};


static struct MemoryWriteAddress firetrk_writemem[] =
{
	{ 0x0000, 0x00ff, MWA_RAM, &firetrk_alpha_num_ram },
	{ 0x0100, 0x07ff, firetrk_zeropage_w },	/* Mirrored */
	{ 0x0800, 0x08ff, firetrk_playfield_w, &firetrk_playfield_ram },
	{ 0x0900, 0x0fff, firetrk_playfield_mirror_w }, /* Mirrored */
	{ 0x1000, 0x101f, firetrk_vert_w },
	{ 0x1020, 0x103f, firetrk_horz_w },
	{ 0x1040, 0x105f, firetrk_crash_reset_w },  /* All are mirrored for the next 31 bytes */
	{ 0x1060, 0x107f, firetrk_skid_reset_w },
	{ 0x1080, 0x109f, firetrk_car_rot_w },
	{ 0x10a0, 0x10bf, firetrk_steer_reset_w },
	//{ 0x10c0, 0x10df, watchdog_reset_w },
	{ 0x10e0, 0x10ff, firetrk_arrow_off_w },
	{ 0x1400, 0x141f, firetrk_motor_snd_w },
	{ 0x1420, 0x143f, firetrk_crash_snd_w },
	{ 0x1440, 0x145f, firetrk_skid_snd_w },
	{ 0x1460, 0x147f, firetrk_drone_hpos_w },
	{ 0x1480, 0x149f, firetrk_drone_vpos_w },
	{ 0x14a0, 0x14bf, firetrk_drone_rot_w },
	{ 0x14c0, 0x14df, firetrk_out_w },
	{ 0x14e0, 0x14ff, firetrk_xtndply_w },	    /* All are mirrored for the next 31 bytes */
	{ 0x1800, 0x1807, MWA_NOP },
	{ 0x2000, 0x3fff, MWA_ROM },
	{ 0xf000, 0xffff, MWA_ROM },
	{ -1 }  /* end of table */
};


static struct MemoryReadAddress superbug_readmem[] =
{
	{ 0x0000, 0x00ff, MRA_RAM },
	{ 0x0200, 0x0207, firetrk_input_r },
	{ 0x0240, 0x0243, firetrk_dip_r },
	{ 0x0400, 0x041f, MRA_RAM },
	{ 0x0500, 0x05ff, MRA_RAM },
	{ 0x0800, 0x1fff, MRA_ROM },
	{ 0xf800, 0xffff, MRA_ROM },
	{ -1 }  /* end of table */
};


static struct MemoryWriteAddress superbug_writemem[] =
{
	{ 0x0000, 0x00ff, MWA_RAM },
	{ 0x0100, 0x0100, firetrk_vert_w },
	{ 0x0120, 0x0120, firetrk_horz_w },
	{ 0x0140, 0x0140, firetrk_crash_reset_w },
	{ 0x0160, 0x0160, firetrk_skid_reset_w },
	{ 0x0180, 0x0180, firetrk_car_rot_w },
	{ 0x01a0, 0x01a0, firetrk_steer_reset_w },
	//{ 0x01c0, 0x01c0, watchdog_reset_w },
	{ 0x01e0, 0x01e0, firetrk_arrow_off_w },
	{ 0x0220, 0x0220, firetrk_asr_w },
	{ 0x0260, 0x026f, firetrk_out_w },
	{ 0x0280, 0x0280, firetrk_motor_snd_w },
	{ 0x02a0, 0x02a0, firetrk_crash_snd_w },
	{ 0x02c0, 0x02c0, firetrk_skid_snd_w },
	{ 0x0400, 0x041f, MWA_RAM, &firetrk_alpha_num_ram },
	{ 0x0500, 0x05ff, firetrk_playfield_w, &firetrk_playfield_ram },
	{ 0x0800, 0x1fff, MWA_ROM },
	{ 0xf800, 0xffff, MWA_ROM },
	{ -1 }  /* end of table */
};


static struct MemoryReadAddress montecar_readmem[] =
{
	{ 0x0000, 0x00ff, MRA_RAM },
	{ 0x0100, 0x07ff, firetrk_zeropage_r },
	{ 0x0800, 0x08ff, MRA_RAM },
	{ 0x0900, 0x0fff, firetrk_playfield_r },
	{ 0x1800, 0x1807, firetrk_input_r },
	{ 0x1c00, 0x1c03, firetrk_dip_r },
	{ 0x2000, 0x3fff, MRA_ROM },
	{ 0xf000, 0xffff, MRA_ROM },
	{ -1 }  /* end of table */
};


static struct MemoryWriteAddress montecar_writemem[] =
{
	{ 0x0000, 0x00ff, MWA_RAM, &firetrk_alpha_num_ram },
	{ 0x0100, 0x07ff, firetrk_zeropage_w },
	{ 0x0800, 0x0fff, firetrk_playfield_w, &firetrk_playfield_ram },
	{ 0x0900, 0x0fff, firetrk_playfield_mirror_w }, /* Mirrored */
	{ 0x1000, 0x1000, firetrk_vert_w },
	{ 0x1020, 0x1020, firetrk_horz_w },
	{ 0x1040, 0x1040, firetrk_drone_reset_w },
	{ 0x1060, 0x1060, firetrk_car_reset_w },
	{ 0x1080, 0x1080, firetrk_car_rot_w },
	{ 0x10a0, 0x10a0, firetrk_steer_reset_w },
	//{ 0x10c0, 0x10c0, watchdog_reset_w },
	{ 0x10e0, 0x10e0, firetrk_skid_reset_w },
	{ 0x1400, 0x1400, firetrk_motor_snd_w },
	{ 0x1420, 0x1420, firetrk_crash_snd_w },
	{ 0x1440, 0x1440, firetrk_skid_snd_w },
	{ 0x1460, 0x1460, firetrk_drone_hpos_w },
	{ 0x1480, 0x1480, firetrk_drone_vpos_w },
	{ 0x14a0, 0x14a0, firetrk_drone_rot_w },
	{ 0x14c0, 0x14c0, firetrk_out_w },
	{ 0x14e0, 0x14e0, firetrk_out2_w },
	{ 0x1800, 0x1807, MWA_NOP },
	{ 0x2000, 0x3fff, MWA_ROM },
	{ 0xf000, 0xffff, MWA_ROM },
	{ -1 }  /* end of table */
};


INPUT_PORTS_START( firetrk )
	PORT_START
	PORT_ANALOG( 0xff, 0x00, IPT_DIAL | IPF_PLAYER1, 25, 10, 0, 0 )

	PORT_START
	PORT_ANALOG( 0xff, 0x00, IPT_DIAL | IPF_PLAYER2, 25, 10, 0, 0 )

	PORT_START
	PORT_BIT (0x01, IP_ACTIVE_HIGH, IPT_UNUSED) /* other DIPs connect here */
	PORT_BIT (0x02, IP_ACTIVE_HIGH, IPT_UNUSED) /* other DIPs connect here */
	PORT_DIPNAME( 0x0c, 0x08, DEF_STR( Coinage ))
	PORT_DIPSETTING(    0x0c, DEF_STR( 2C_1C ))
	PORT_DIPSETTING(    0x08, DEF_STR( 1C_1C ))
	PORT_DIPSETTING(    0x04, DEF_STR( 1C_2C ))
	PORT_DIPSETTING(    0x00, DEF_STR( Free_Play ))
	PORT_DIPNAME( 0x10, 0x00, DEF_STR( Unused ))
	PORT_DIPSETTING(    0x10, DEF_STR( Off ))
	PORT_DIPSETTING(    0x00, DEF_STR( On ))
	PORT_DIPNAME( 0x20, 0x00, DEF_STR( Unused ))
	PORT_DIPSETTING(    0x20, DEF_STR( Off ))
	PORT_DIPSETTING(    0x00, DEF_STR( On ))

	PORT_START
	PORT_DIPNAME( 0x03, 0x00, "Language" )
	PORT_DIPSETTING(    0x00, "English" )
	PORT_DIPSETTING(    0x01, "French" )
	PORT_DIPSETTING(    0x02, "Spanish" )
	PORT_DIPSETTING(    0x03, "German" )
	PORT_DIPNAME( 0x0c, 0x04, "Play Time" )
	PORT_DIPSETTING(    0x00, "60 Seconds" )
	PORT_DIPSETTING(    0x04, "90 Seconds" )
	PORT_DIPSETTING(    0x08, "120 Seconds" )
	PORT_DIPSETTING(    0x0c, "150 Seconds" )
	PORT_DIPNAME( 0x30, 0x20, "Extended Play" )
	PORT_DIPSETTING(    0x10, "Liberal" )
	PORT_DIPSETTING(    0x20, "Medium" )
	PORT_DIPSETTING(    0x30, "Conservative" )
	PORT_DIPSETTING(    0x00, "Never" )

	PORT_START /* bit 0 */
	PORT_BIT (0x01, IP_ACTIVE_HIGH, IPT_UNUSED)
	PORT_BITX(0x02, IP_ACTIVE_HIGH, IPT_BUTTON1 | IPF_PLAYER1, "Gas", IP_KEY_DEFAULT, IP_JOY_DEFAULT)
	PORT_BIT (0x04, IP_ACTIVE_HIGH, IPT_UNUSED) /* STEER DIR 1 */
	PORT_BIT (0x08, IP_ACTIVE_HIGH, IPT_UNUSED) /* STEER DIR 2 */
	PORT_BITX(0x10, IP_ACTIVE_HIGH, IPT_BUTTON1 | IPF_PLAYER2, "Bell", IP_KEY_DEFAULT, IP_JOY_DEFAULT)
	PORT_BIT (0x20, IP_ACTIVE_HIGH, IPT_TILT)
	PORT_BIT (0x40, IP_ACTIVE_HIGH, IPT_UNUSED) /* SKID */
	PORT_SERVICE(0x80, IP_ACTIVE_HIGH)

	PORT_START /* bit 6 */
	PORT_BITX(0x01, IP_ACTIVE_HIGH, IPT_START1, "Front Player Start", IP_KEY_DEFAULT, IP_JOY_DEFAULT)
	PORT_BITX(0x02, IP_ACTIVE_HIGH, IPT_START2, "Back Player Start", IP_KEY_DEFAULT, IP_JOY_DEFAULT)
	PORT_BITX(0x04, IP_ACTIVE_HIGH, IPT_START3, "Both Players Start", IP_KEY_DEFAULT, IP_JOY_DEFAULT)
	PORT_BITX(0x08, IP_ACTIVE_HIGH, IPT_BUTTON3 | IPF_PLAYER1, "Track Select", KEYCODE_SPACE, IP_JOY_DEFAULT)
	PORT_BIT (0x10, IP_ACTIVE_HIGH, IPT_UNUSED)
	PORT_BIT (0x20, IP_ACTIVE_LOW,  IPT_VBLANK)
	PORT_DIPNAME( 0x40, 0x40, DEF_STR( Cabinet ))
	PORT_DIPSETTING(    0x00, "Smokey Joe (1 Player)" )
	PORT_DIPSETTING(    0x40, "Fire Truck (2 Players)" )
	PORT_BITX(0x80, IP_ACTIVE_HIGH,	IPT_SERVICE, "Diag Hold", KEYCODE_F6, IP_JOY_NONE)

	PORT_START /* bit 7 */
	PORT_BIT (0x01, IP_ACTIVE_HIGH, IPT_UNUSED)
	PORT_BIT (0x02, IP_ACTIVE_HIGH, IPT_UNUSED)
	PORT_BIT (0x04, IP_ACTIVE_HIGH, IPT_UNUSED) /* STEER FLAG 1 */
	PORT_BIT (0x08, IP_ACTIVE_HIGH, IPT_UNUSED) /* STEER FLAG 2 */
	PORT_BIT (0x10, IP_ACTIVE_HIGH, IPT_COIN1)
	PORT_BIT (0x20, IP_ACTIVE_HIGH, IPT_COIN2)
	PORT_BIT (0x40, IP_ACTIVE_HIGH, IPT_UNUSED) /* CRASH */
	PORT_BITX(0x80, IP_ACTIVE_HIGH, IPT_SERVICE, "Diag Step", KEYCODE_F1, IP_JOY_NONE)

	PORT_START
	PORT_BITX(0x01, IP_ACTIVE_HIGH, IPT_BUTTON2 | IPF_PLAYER1, "Horn", IP_KEY_DEFAULT, IP_JOY_DEFAULT)
INPUT_PORTS_END


INPUT_PORTS_START( superbug )
	PORT_START
	PORT_ANALOG( 0xff, 0x00, IPT_DIAL, 25, 10, 0, 0 )

	PORT_START
	PORT_BIT (0xff, IP_ACTIVE_HIGH, IPT_UNUSED)

	PORT_START
	PORT_BIT (0x01, IP_ACTIVE_HIGH, IPT_UNUSED) /* other DIPs connect here */
	PORT_BIT (0x02, IP_ACTIVE_HIGH, IPT_UNUSED) /* other DIPs connect here */

	PORT_START
	PORT_DIPNAME( 0x03, 0x02, DEF_STR( Coinage ))
	PORT_DIPSETTING(    0x03, DEF_STR( 2C_1C ))
	PORT_DIPSETTING(    0x02, DEF_STR( 1C_1C ))
	PORT_DIPSETTING(    0x01, DEF_STR( 1C_2C ))
	PORT_DIPSETTING(    0x00, DEF_STR( Free_Play ))
	PORT_DIPNAME( 0x0c, 0x04, "Play Time" )
	PORT_DIPSETTING(    0x00, "60 seconds" )
	PORT_DIPSETTING(    0x04, "90 seconds" )
	PORT_DIPSETTING(    0x08, "120 seconds" )
	PORT_DIPSETTING(    0x0c, "150 seconds" )
	PORT_DIPNAME( 0x30, 0x20, "Extended Play" )
	PORT_DIPSETTING(    0x10, "Liberal" )
	PORT_DIPSETTING(    0x20, "Medium" )
	PORT_DIPSETTING(    0x30, "Conservative" )
	PORT_DIPSETTING(    0x00, "Never" )
	PORT_DIPNAME( 0xc0, 0x00, "Language" )
	PORT_DIPSETTING(    0x00, "English" )
	PORT_DIPSETTING(    0x40, "French" )
	PORT_DIPSETTING(    0x80, "Spanish" )
	PORT_DIPSETTING(    0xc0, "German" )

	PORT_START /* bit 0 */
	PORT_BIT (0x01, IP_ACTIVE_HIGH, IPT_UNUSED) /* GEAR 2 */
	PORT_BITX(0x02, IP_ACTIVE_HIGH, IPT_BUTTON1, "Gas", IP_KEY_DEFAULT, IP_JOY_DEFAULT)
	PORT_BIT (0x04, IP_ACTIVE_HIGH, IPT_UNUSED) /* STEER DIR */
	PORT_BITX(0x08, IP_ACTIVE_HIGH, IPT_BUTTON7, "Hiscore Reset", KEYCODE_H, IP_JOY_DEFAULT)
	PORT_BIT (0x10, IP_ACTIVE_HIGH, IPT_UNUSED)
	PORT_SERVICE( 0x20, IP_ACTIVE_HIGH)
	PORT_BIT (0x40, IP_ACTIVE_HIGH, IPT_UNUSED) /* SKID */
	PORT_BIT (0x80, IP_ACTIVE_HIGH, IPT_TILT)

	PORT_START /* bit 6 */
	PORT_BIT(0xff, IP_ACTIVE_HIGH, IPT_UNUSED)

	PORT_START /* bit 7 */
	PORT_BIT (0x01, IP_ACTIVE_HIGH, IPT_UNUSED) /* GEAR 3 */
	PORT_BIT (0x02, IP_ACTIVE_HIGH, IPT_UNUSED) /* GEAR 1 */
	PORT_BIT (0x04, IP_ACTIVE_HIGH, IPT_UNUSED) /* STEER FLAG */
	PORT_BIT (0x08, IP_ACTIVE_HIGH, IPT_COIN1)
	PORT_BIT (0x10, IP_ACTIVE_HIGH, IPT_COIN2)
	PORT_BIT (0x20, IP_ACTIVE_HIGH, IPT_START1)
	PORT_BIT (0x40, IP_ACTIVE_HIGH, IPT_UNUSED) /* CRASH */
	PORT_BITX(0x80, IP_ACTIVE_HIGH, IPT_BUTTON6, "Track Select", KEYCODE_SPACE, IP_JOY_DEFAULT )

	PORT_START
	PORT_BITX(0x01, IP_ACTIVE_HIGH, IPT_BUTTON2, "Gear 1", KEYCODE_Z, IP_JOY_DEFAULT )
	PORT_BITX(0x02, IP_ACTIVE_HIGH, IPT_BUTTON3, "Gear 2", KEYCODE_X, IP_JOY_DEFAULT )
	PORT_BITX(0x04, IP_ACTIVE_HIGH, IPT_BUTTON4, "Gear 3", KEYCODE_C, IP_JOY_DEFAULT )
	PORT_BITX(0x08, IP_ACTIVE_HIGH, IPT_BUTTON5, "Gear 4", KEYCODE_V, IP_JOY_DEFAULT )
INPUT_PORTS_END


INPUT_PORTS_START( montecar )
	PORT_START
	PORT_ANALOG( 0xff, 0x00, IPT_DIAL | IPF_PLAYER1, 25, 10, 0, 0 )

	PORT_START
	PORT_BIT (0xff, IP_ACTIVE_HIGH, IPT_UNUSED)

	PORT_START
	PORT_BIT (0x01, IP_ACTIVE_HIGH, IPT_UNUSED) /* other DIPs connect here */
	PORT_BIT (0x02, IP_ACTIVE_HIGH, IPT_UNUSED) /* other DIPs connect here */
	PORT_DIPNAME( 0x0c, 0x0c, "Coin 3 Multiplier" )
	PORT_DIPSETTING(    0x0c, "1" )
	PORT_DIPSETTING(    0x08, "4" )
	PORT_DIPSETTING(    0x04, "5" )
	PORT_DIPSETTING(    0x00, "6" )
	PORT_DIPNAME( 0x10, 0x10, "Coin 2 Multiplier" )
	PORT_DIPSETTING(    0x10, "1" )
	PORT_DIPSETTING(    0x00, "2" )
	PORT_DIPNAME( 0x20, 0x00, DEF_STR( Unused ))
	PORT_DIPSETTING(    0x20, DEF_STR( Off ))
	PORT_DIPSETTING(    0x00, DEF_STR( On ))

	PORT_START
	PORT_DIPNAME( 0x03, 0x02, DEF_STR( Coinage ))
	PORT_DIPSETTING(    0x00, DEF_STR( 2C_1C ))
	PORT_DIPSETTING(    0x02, DEF_STR( 1C_1C ))
	PORT_DIPSETTING(    0x01, DEF_STR( 1C_2C ))
	PORT_DIPSETTING(    0x03, DEF_STR( Free_Play ))
	PORT_DIPNAME( 0x0c, 0x08, "Extended Play" )
	PORT_DIPSETTING(    0x04, "Liberal" )
	PORT_DIPSETTING(    0x08, "Medium" )
	PORT_DIPSETTING(    0x00, "Conservative" )
	PORT_DIPSETTING(    0x0c, "Never" )
	PORT_DIPNAME( 0x30, 0x20, "Play Time" )
	PORT_DIPSETTING(    0x30, "60 Seconds" )
	PORT_DIPSETTING(    0x10, "90 Seconds" )
	PORT_DIPSETTING(    0x20, "120 Seconds" )
	PORT_DIPSETTING(    0x00, "150 Seconds" )
	PORT_DIPNAME( 0xc0, 0xc0, "Language" )
	PORT_DIPSETTING(    0xc0, "English" )
	PORT_DIPSETTING(    0x80, "Spanish" )
	PORT_DIPSETTING(    0x40, "French" )
	PORT_DIPSETTING(    0x00, "German" )

	PORT_START /* bit 0 */
	PORT_BIT(0xff, IP_ACTIVE_HIGH, IPT_UNUSED)

	PORT_START /* bit 6 */
	PORT_BIT (0x01, IP_ACTIVE_HIGH, IPT_UNUSED) /* GEAR 1 */
	PORT_BIT (0x02, IP_ACTIVE_HIGH, IPT_UNUSED) /* GEAR 2 */
	PORT_BIT (0x04, IP_ACTIVE_HIGH, IPT_UNUSED) /* GEAR 3 */
	PORT_BITX(0x08, IP_ACTIVE_HIGH, IPT_BUTTON6, "Track Select", KEYCODE_SPACE, IP_JOY_DEFAULT )
	PORT_BITX(0x10, IP_ACTIVE_HIGH, IPT_BUTTON1, "Gas", IP_KEY_DEFAULT, IP_JOY_DEFAULT )
	PORT_BIT (0x20, IP_ACTIVE_HIGH, IPT_VBLANK)
	PORT_BIT (0x40, IP_ACTIVE_HIGH, IPT_UNUSED) /* STEER DIR */
	PORT_BIT (0x80, IP_ACTIVE_HIGH, IPT_UNUSED) /* SKID 1 */

	PORT_START /* bit 7 */
	PORT_BIT (0x01, IP_ACTIVE_HIGH, IPT_START1)
	PORT_BIT (0x02, IP_ACTIVE_HIGH, IPT_TILT)
	PORT_SERVICE(0x04, IP_ACTIVE_HIGH)
	PORT_BIT (0x08, IP_ACTIVE_HIGH, IPT_COIN1)
	PORT_BIT (0x10, IP_ACTIVE_HIGH, IPT_COIN2)
	PORT_BIT (0x20, IP_ACTIVE_HIGH, IPT_COIN3)
	PORT_BIT (0x40, IP_ACTIVE_HIGH, IPT_UNUSED) /* STEER FLAG */
	PORT_BIT (0x80, IP_ACTIVE_HIGH, IPT_UNUSED) /* SKID 0 */

	PORT_START
	PORT_BITX(0x01, IP_ACTIVE_HIGH, IPT_BUTTON2, "Gear 1", KEYCODE_Z, IP_JOY_DEFAULT )
	PORT_BITX(0x02, IP_ACTIVE_HIGH, IPT_BUTTON3, "Gear 2", KEYCODE_X, IP_JOY_DEFAULT )
	PORT_BITX(0x04, IP_ACTIVE_HIGH, IPT_BUTTON4, "Gear 3", KEYCODE_C, IP_JOY_DEFAULT )
	PORT_BITX(0x08, IP_ACTIVE_HIGH, IPT_BUTTON5, "Gear 4", KEYCODE_V, IP_JOY_DEFAULT )
INPUT_PORTS_END


static struct GfxLayout firetrk_text_layout =
{
	16, 16, /* width, height */
	32,     /* total         */
	1,      /* planes        */
	{ 0 },  /* plane offsets */
	{
		0x1C, 0x1D, 0x1E, 0x1F, 0x04, 0x05, 0x06, 0x07,
		0x0C, 0x0D, 0x0E, 0x0F, 0x14, 0x15, 0x16, 0x17
	},
	{
		0x000, 0x020, 0x040, 0x060, 0x080, 0x0A0, 0x0C0, 0x0E0,
		0x100, 0x120, 0x140, 0x160, 0x180, 0x1A0, 0x1C0, 0x1E0
	},
	0x200
};


static struct GfxLayout superbug_text_layout =
{
	16, 16, /* width, height */
	32,     /* total         */
	1,      /* planes        */
	{ 0 },  /* plane offsets */
	{
		0x0C, 0x0D, 0x0E, 0x0F, 0x14, 0x15, 0x16, 0x17,
		0x1C, 0x1D, 0x1E, 0x1F, 0x04, 0x05, 0x06, 0x07
	},
	{
		0x000, 0x020, 0x040, 0x060, 0x080, 0x0A0, 0x0C0, 0x0E0,
		0x100, 0x120, 0x140, 0x160, 0x180, 0x1A0, 0x1C0, 0x1E0
	},
	0x200
};


static struct GfxLayout montecar_text_layout =
{
	8, 8,   /* width, height */
	64,     /* total         */
	1,      /* planes        */
	{ 0 },  /* plane offsets */
	{
		0xC, 0xD, 0xE, 0xF, 0x4, 0x5, 0x6, 0x7
	},
	{
		0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70
	},
	0x80
};


static struct GfxLayout firetrk_tile_layout =
{
	16, 16, /* width, height */
	64,     /* total         */
	1,      /* planes        */
	{ 0 },  /* plane offsets */
	{
		0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
		0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF
	},
	{
		0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70,
		0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0
	},
	0x100
};


static struct GfxLayout superbug_tile_layout =
{
	16, 16, /* width, height */
	64,     /* total         */
	1,      /* planes        */
	{ 0 },  /* plane offsets */
	{
		0x07, 0x06, 0x05, 0x04, 0x0F, 0x0E, 0x0D, 0x0C,
		0x17, 0x16, 0x15, 0x14, 0x1F, 0x1E, 0x1D, 0x1C
	},
	{
		0x000, 0x020, 0x040, 0x060, 0x080, 0x0A0, 0x0C0, 0x0E0,
		0x100, 0x120, 0x140, 0x160, 0x180, 0x1A0, 0x1C0, 0x1E0
	},
	0x200
};


static struct GfxLayout firetrk_car_layout1 =
{
	32, 32, /* width, height */
	4,      /* total         */
	1,      /* planes        */
	{ 0 },  /* plane offsets */
	{
		0x000, 0x040, 0x080, 0x0C0, 0x100, 0x140, 0x180, 0x1C0,
		0x200, 0x240, 0x280, 0x2C0, 0x300, 0x340, 0x380, 0x3C0,
		0x400, 0x440, 0x480, 0x4C0, 0x500, 0x540, 0x580, 0x5C0,
		0x600, 0x640, 0x680, 0x6C0, 0x700, 0x740, 0x780, 0x7C0
	},
	{
		0x04, 0x05, 0x06, 0x07, 0x0C, 0x0D, 0x0E, 0x0F,
		0x14, 0x15, 0x16, 0x17, 0x1C, 0x1D, 0x1E, 0x1F,
		0x24, 0x25, 0x26, 0x27, 0x2C, 0x2D, 0x2E, 0x2F,
		0x34, 0x35, 0x36, 0x37, 0x3C, 0x3D, 0x3E, 0x3B
	},
	0x800
};


static struct GfxLayout superbug_car_layout1 =
{
	32, 32, /* width, height */
	4,      /* total         */
	1,      /* planes        */
	{ 0 },  /* plane offsets */
	{
		0x0000, 0x0100, 0x0200, 0x0300, 0x0400, 0x0500, 0x0600, 0x0700,
		0x0800, 0x0900, 0x0A00, 0x0B00, 0x0C00, 0x0D00, 0x0E00, 0x0F00,
		0x1000, 0x1100, 0x1200, 0x1300, 0x1400, 0x1500, 0x1600, 0x1700,
		0x1800, 0x1900, 0x1A00, 0x1B00, 0x1C00, 0x1D00, 0x1E00, 0x1F00
	},
	{
		0x04, 0x0C, 0x14, 0x1C, 0x24, 0x2C, 0x34, 0x3C,
		0x44, 0x4C, 0x54, 0x5C, 0x64, 0x6C, 0x74, 0x7C,
		0x84, 0x8C, 0x94, 0x9C, 0xA4, 0xAC, 0xB4, 0xBC,
		0xC4, 0xCC, 0xD4, 0xDC, 0xE4, 0xEC, 0xF4, 0xFC
	},
	0x001
};


static struct GfxLayout montecar_car_layout =
{
	32, 32, /* width, height */
	8,      /* total         */
	2,      /* planes        */
	        /* plane offsets */
	{ 1, 0 },
	{
		0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E,
		0x10, 0x12, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x1E,
		0x20, 0x22, 0x24, 0x26, 0x28, 0x2A, 0x2C, 0x2E,
		0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E
	},
	{
		0x000, 0x040, 0x080, 0x0C0, 0x100, 0x140, 0x180, 0x1C0,
		0x200, 0x240, 0x280, 0x2C0, 0x300, 0x340, 0x380, 0x3C0,
		0x400, 0x440, 0x480, 0x4C0, 0x500, 0x540, 0x580, 0x5C0,
		0x600, 0x640, 0x680, 0x6C0, 0x700, 0x740, 0x780, 0x7C0
	},
	0x800
};


static struct GfxLayout firetrk_car_layout2 =
{
	32, 32, /* width, height */
	4,      /* total         */
	1,      /* planes        */
	{ 0 },  /* plane offsets */
	{
		0x04, 0x05, 0x06, 0x07, 0x0C, 0x0D, 0x0E, 0x0F,
		0x14, 0x15, 0x16, 0x17, 0x1C, 0x1D, 0x1E, 0x1F,
		0x24, 0x25, 0x26, 0x27, 0x2C, 0x2D, 0x2E, 0x2F,
		0x34, 0x35, 0x36, 0x37, 0x3C, 0x3D, 0x3E, 0x3B
	},
	{
		0x000, 0x040, 0x080, 0x0C0, 0x100, 0x140, 0x180, 0x1C0,
		0x200, 0x240, 0x280, 0x2C0, 0x300, 0x340, 0x380, 0x3C0,
		0x400, 0x440, 0x480, 0x4C0, 0x500, 0x540, 0x580, 0x5C0,
		0x600, 0x640, 0x680, 0x6C0, 0x700, 0x740, 0x780, 0x7C0
	},
	0x800
};


static struct GfxLayout superbug_car_layout2 =
{
	32, 32, /* width, height */
	4,      /* total         */
	1,      /* planes        */
	{ 0 },  /* plane offsets */
	{
		0x04, 0x0C, 0x14, 0x1C, 0x24, 0x2C, 0x34, 0x3C,
		0x44, 0x4C, 0x54, 0x5C, 0x64, 0x6C, 0x74, 0x7C,
		0x84, 0x8C, 0x94, 0x9C, 0xA4, 0xAC, 0xB4, 0xBC,
		0xC4, 0xCC, 0xD4, 0xDC, 0xE4, 0xEC, 0xF4, 0xFC
	},
	{
		0x0000, 0x0100, 0x0200, 0x0300, 0x0400, 0x0500, 0x0600, 0x0700,
		0x0800, 0x0900, 0x0A00, 0x0B00, 0x0C00, 0x0D00, 0x0E00, 0x0F00,
		0x1000, 0x1100, 0x1200, 0x1300, 0x1400, 0x1500, 0x1600, 0x1700,
		0x1800, 0x1900, 0x1A00, 0x1B00, 0x1C00, 0x1D00, 0x1E00, 0x1F00
	},
	0x001
};


static struct GfxLayout firetrk_trailer_layout =
{
	64, 64, /* width, height */
	8,      /* total         */
	1,      /* planes        */
	{ 0 },  /* plane offsets */
	{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
		0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
		0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
		0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F
	},
	{
		0x000, 0x040, 0x080, 0x0C0, 0x100, 0x140, 0x180, 0x1C0,
		0x200, 0x240, 0x280, 0x2C0, 0x300, 0x340, 0x380, 0x3C0,
		0x400, 0x440, 0x480, 0x4C0, 0x500, 0x540, 0x580, 0x5C0,
		0x600, 0x640, 0x680, 0x6C0, 0x700, 0x740, 0x780, 0x7C0,
		0x800, 0x840, 0x880, 0x8C0, 0x900, 0x940, 0x980, 0x9C0,
		0xA00, 0xA40, 0xA80, 0xAC0, 0xB00, 0xB40, 0xB80, 0xBC0,
		0xC00, 0xC40, 0xC80, 0xCC0, 0xD00, 0xD40, 0xD80, 0xDC0,
		0xE00, 0xE40, 0xE80, 0xEC0, 0xF00, 0xF40, 0xF80, 0xFC0
	},
	0x1000
};


static struct GfxDecodeInfo firetrk_gfxdecodeinfo[] =
{
	{ REGION_GFX1, 0, &firetrk_text_layout, 26, 1 },
	{ REGION_GFX2, 0, &firetrk_tile_layout, 0, 8 },
	{ REGION_GFX2, 0, &firetrk_tile_layout, 16, 3 },
	{ REGION_GFX3, 0, &firetrk_car_layout1, 22, 2 },
	{ REGION_GFX3, 0, &firetrk_car_layout2, 22, 2 },
	{ REGION_GFX4, 0, &firetrk_trailer_layout, 22, 2 },
	{ -1 }
};


static struct GfxDecodeInfo superbug_gfxdecodeinfo[] =
{
	{ REGION_GFX1, 0, &superbug_text_layout, 26, 1 },
	{ REGION_GFX2, 0, &superbug_tile_layout, 0, 8 },
	{ REGION_GFX2, 0, &superbug_tile_layout, 16, 3 },
	{ REGION_GFX3, 0, &superbug_car_layout1, 22, 2 },
	{ REGION_GFX3, 0, &superbug_car_layout2, 22, 2 },
	{ -1 }
};


static struct GfxDecodeInfo montecar_gfxdecodeinfo[] =
{
	{ REGION_GFX1, 0, &montecar_text_layout, 44, 1 },
	{ REGION_GFX2, 0, &firetrk_tile_layout, 0, 8 },
	{ REGION_GFX2, 0, &firetrk_tile_layout, 16, 4 },
	{ REGION_GFX3, 0, &montecar_car_layout, 24, 1 },
	{ REGION_GFX4, 0, &montecar_car_layout, 28, 4 },
	{ -1 }
};


static const struct MachineDriver machine_driver_firetrk =
{
	{
		{
			CPU_M6800,
			12096000 / 12, /* 1MHz during normal operation,  750Khz during self-test sequence */
			firetrk_readmem,firetrk_writemem,0,0,
			firetrk_interrupt,1
		},
	},
	60, /* DEFAULT_REAL_60HZ_VBLANK_DURATION */ ((int) ((22. * 1000000) / (262. * 60) + 0.5)),
	1,	/* 1 CPU slice per frame */
	init_machine_firetrk,

	/* video hardware */
	320, 240, { 0, 319, 0, 239 },
	firetrk_gfxdecodeinfo,
	4, 28,
	init_palette_firetrk,
	VIDEO_TYPE_RASTER,
	firetrk_vh_eof,
	firetrk_vh_start,
	firetrk_vh_stop,
	firetrk_vh_screenrefresh,
	/* sound hardware */
	0,0,0,0,
	{
		{
			SOUND_DISCRETE,
			&firetrk_sound_interface
		}
	}
};

static const struct MachineDriver machine_driver_superbug =
{
	{
		{
			CPU_M6800,
			12096000 / 12, /* 1MHz during normal operation,  750Khz during self-test sequence */
			superbug_readmem,superbug_writemem,0,0,
			firetrk_interrupt,1
		},
	},
	60, /* DEFAULT_REAL_60HZ_VBLANK_DURATION */ ((int) ((22. * 1000000) / (262. * 60) + 0.5)),
	1,	/* 1 CPU slice per frame */
	init_machine_firetrk,

	/* video hardware */
	320, 240, { 0, 319, 0, 239 },
	superbug_gfxdecodeinfo,
	4, 28,
	init_palette_firetrk,
	VIDEO_TYPE_RASTER,
	firetrk_vh_eof,
	firetrk_vh_start,
	firetrk_vh_stop,
	firetrk_vh_screenrefresh,
	/* sound hardware */
	0,0,0,0,
	{
		{
			SOUND_DISCRETE,
			&superbug_sound_interface
		}
	}
};

static const struct MachineDriver machine_driver_montecar =
{
	{
		{
			CPU_M6800,
			12096000 / 12, /* 1MHz during normal operation,  750Khz during self-test sequence */
			montecar_readmem,montecar_writemem,0,0,
			firetrk_interrupt,1
		},
	},
	60, /* DEFAULT_REAL_60HZ_VBLANK_DURATION */ ((int) ((22. * 1000000) / (262. * 60) + 0.5)),
	1,	/* 1 CPU slice per frame */
	init_machine_firetrk,

	/* video hardware */
	320, 240, { 0, 319, 0, 239 },
	montecar_gfxdecodeinfo,
	26, 46,
	init_palette_montecar,
	VIDEO_TYPE_RASTER,
	firetrk_vh_eof,
	firetrk_vh_start,
	firetrk_vh_stop,
	firetrk_vh_screenrefresh,
	/* sound hardware */
	0,0,0,0,
	{
		{
			SOUND_DISCRETE,
			&montecar_sound_interface
		}
	}
};
#if 0
static MACHINE_DRIVER_START( firetrk )

	/* basic machine hardware */
	MDRV_CPU_ADD_TAG("main", M6800, 12096000 / 12)	/* 750Khz during service mode */
	MDRV_CPU_MEMORY(firetrk_readmem, firetrk_writemem)
	MDRV_CPU_VBLANK_INT(firetrk_interrupt, 1)

	MDRV_FRAMES_PER_SECOND(60)
	MDRV_VBLANK_DURATION((int) ((22. * 1000000) / (262. * 60) + 0.5))

	MDRV_MACHINE_INIT(firetrk)

	/* video hardware */
	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER)
	MDRV_SCREEN_SIZE(320, 240)
	MDRV_VISIBLE_AREA(0, 319, 0, 239)
	MDRV_GFXDECODE(firetrk_gfxdecodeinfo)

	MDRV_PALETTE_INIT(firetrk)
	MDRV_PALETTE_LENGTH(4)
	MDRV_COLORTABLE_LENGTH(28)

	MDRV_VIDEO_START(firetrk)
	MDRV_VIDEO_EOF(firetrk)
	MDRV_VIDEO_UPDATE(firetrk)

	/* sound hardware */
	MDRV_SOUND_ADD_TAG("discrete", DISCRETE, firetrk_sound_interface)
MACHINE_DRIVER_END


static MACHINE_DRIVER_START( superbug )

	/* basic machine hardware */
	MDRV_IMPORT_FROM(firetrk)
	MDRV_CPU_REPLACE("main", M6800, 12096000 / 16)
	MDRV_CPU_MEMORY(superbug_readmem, superbug_writemem)

	/* video hardware */
	MDRV_GFXDECODE(superbug_gfxdecodeinfo)

	MDRV_PALETTE_INIT(firetrk)
	MDRV_PALETTE_LENGTH(4)
	MDRV_COLORTABLE_LENGTH(28)

	/* sound hardware */
	MDRV_SOUND_REPLACE("discrete", DISCRETE, superbug_sound_interface)
MACHINE_DRIVER_END


static MACHINE_DRIVER_START( montecar )

	/* basic machine hardware */
	MDRV_IMPORT_FROM(firetrk)
	MDRV_CPU_REPLACE("main", M6800, 12096000 / 12)	/* 750Khz during service mode */
	MDRV_CPU_MEMORY(montecar_readmem, montecar_writemem)

	/* video hardware */
	MDRV_GFXDECODE(montecar_gfxdecodeinfo)

	MDRV_PALETTE_INIT(montecar)
	MDRV_PALETTE_LENGTH(26)
	MDRV_COLORTABLE_LENGTH(46)

	/* sound hardware */
	MDRV_SOUND_REPLACE("discrete", DISCRETE, montecar_sound_interface)
MACHINE_DRIVER_END
#endif


ROM_START( firetrk )
	ROM_REGION( 0x10000, REGION_CPU1 )
	ROM_LOAD(          "32823-02.c1", 0x2000, 0x800, 0x9570bdd3 )
	ROM_LOAD(          "32824-01.d1", 0x2800, 0x800, 0xa5fc5629 )
	ROM_LOAD_NIB_HIGH( "32816-01.k1", 0x3000, 0x800, 0xc0535598 )
	ROM_LOAD_NIB_LOW ( "32820-01.k2", 0x3000, 0x800, 0x5733f9ed )
	ROM_LOAD_NIB_HIGH( "32815-01.j1", 0x3800, 0x800, 0x506ee759 )
	ROM_LOAD_NIB_LOW ( "32819-01.j2", 0x3800, 0x800, 0xf1c3fa87 )
	/* Mirrored at $f000 */
	ROM_LOAD_NIB_HIGH( "32816-01.k1", 0xf000, 0x800, 0xc0535598 )
	ROM_LOAD_NIB_LOW ( "32820-01.k2", 0xf000, 0x800, 0x5733f9ed )
	ROM_LOAD_NIB_HIGH( "32815-01.j1", 0xf800, 0x800, 0x506ee759 )
	ROM_LOAD_NIB_LOW ( "32819-01.j2", 0xf800, 0x800, 0xf1c3fa87 )


	ROM_REGION( 0x0800, REGION_GFX1|REGIONFLAG_DISPOSE ) /* text */
	ROM_LOAD( "32827-01.r3", 0x000, 0x800, 0xcca31d2b )

	ROM_REGION( 0x0800, REGION_GFX2| REGIONFLAG_DISPOSE ) /* tiles */
	ROM_LOAD( "32828-02.f5", 0x000, 0x800, 0x68ef5f19 )

	ROM_REGION( 0x0400, REGION_GFX3| REGIONFLAG_DISPOSE ) /* car */
	ROM_LOAD( "32831-01.p7", 0x000, 0x400, 0xbb8d144f )

	ROM_REGION( 0x1000, REGION_GFX4| REGIONFLAG_DISPOSE ) /* trailer */
	ROM_LOAD( "32829-01.j5", 0x000, 0x800, 0xe7267d71 )
	ROM_LOAD( "32830-01.l5", 0x800, 0x800, 0xe4d8b685 )

	ROM_REGION( 0x100, REGION_PROMS )
	ROM_LOAD( "9114.prm", 0x0000, 0x100, 0xb8094b4c ) /* sync */
ROM_END


ROM_START( superbug )
	ROM_REGION( 0x10000, REGION_CPU1 )
	ROM_LOAD( "9121.d1", 0x0800, 0x800, 0x350df308 )
	ROM_LOAD( "9122.c1", 0x1000, 0x800, 0xeb6e3e37 )
	ROM_LOAD( "9123.a1", 0x1800, 0x800, 0xf42c6bbe )
	ROM_RELOAD(          0xF800, 0x800 )

	ROM_REGION( 0x0800, REGION_GFX1| REGIONFLAG_DISPOSE ) /* text */
	ROM_LOAD( "9124.m3", 0x0000, 0x400, 0xf8af8dd5 )
	ROM_LOAD( "9471.n3", 0x0400, 0x400, 0x52250698 )

	ROM_REGION( 0x1000, REGION_GFX2| REGIONFLAG_DISPOSE ) /* tiles */
	ROM_LOAD( "9126.f5", 0x0000, 0x400, 0xee695137 )
	ROM_LOAD( "9472.h5", 0x0400, 0x400, 0x5ddb80ac )
	ROM_LOAD( "9127.e5", 0x0800, 0x400, 0xbe1386b4 )
	ROM_RELOAD(          0x0C00, 0x400 )

	ROM_REGION( 0x0400, REGION_GFX3| REGIONFLAG_DISPOSE ) /* car */
	ROM_LOAD( "9125.k6", 0x0000, 0x400, 0xa3c835df )

	ROM_REGION( 0x0100, REGION_PROMS )
	ROM_LOAD( "9114.prm", 0x0000, 0x100, 0xb8094b4c ) /* sync */
ROM_END


ROM_START( montecar )
	ROM_REGION( 0x10000, REGION_CPU1 )
	ROM_LOAD( "35766-01.h1", 0x2000, 0x800, 0xd3695f09 )
	ROM_LOAD( "35765-01.f1", 0x2800, 0x800, 0x9491a7ee )
	ROM_LOAD( "35764-01.d1", 0x3000, 0x800, 0x899aaf4e )
	ROM_RELOAD(              0xf000, 0x800 )
	ROM_LOAD( "35763-01.c1", 0x3800, 0x800, 0x378bfe47 )
	ROM_RELOAD(              0xf800, 0x800 )

	ROM_REGION( 0x0400, REGION_GFX1| REGIONFLAG_DISPOSE ) /* text */
	ROM_LOAD( "35778-01.m4", 0x0000, 0x400, 0x294ee08e )

	ROM_REGION( 0x0800, REGION_GFX2| REGIONFLAG_DISPOSE ) /* tiles */
	ROM_LOAD( "35775-01.e6", 0x0000, 0x800, 0x504106e9 )

	ROM_REGION( 0x0800, REGION_GFX3| REGIONFLAG_DISPOSE ) /* car */
	ROM_LOAD( "35779-01.m6", 0x0000, 0x800, 0x4fbb3fe1 )

	ROM_REGION( 0x0800, REGION_GFX4| REGIONFLAG_DISPOSE ) /* drone */
	ROM_LOAD( "35780-01.b6", 0x0000, 0x800, 0x9d0f1374 )

	ROM_REGION( 0x300, REGION_PROMS )
	ROM_LOAD( "35785-01.e7", 0x0000, 0x200, 0x386c543a ) /* color */
    ROM_LOAD( "9114.prm",    0x0200, 0x100, 0xb8094b4c ) /* sync */
ROM_END


GAME( 1977, superbug, 0, superbug, superbug, superbug, ROT270, "Atari", "Super Bug" )
GAME( 1978, firetrk,  0, firetrk,  firetrk,  firetrk,  ROT270, "Atari", "Fire Truck" )
GAME( 1979, montecar, 0, montecar, montecar, montecar, ROT270, "Atari", "Monte Carlo" )
